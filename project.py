# -*- coding: utf-8 -*-
"""project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ip3kfK5-cTr0R2GZEldYi07Y_ilJ1Cv3
"""

# Load the Drive helper.
from google.colab import drive

# This will prompt for authorization. Follow the prompts.
drive.mount('/content/drive')

# After executing the cell above, Drive
# files will be present in "/content/drive/My Drive".
# Try listing them (`ls` stands for "list")
!ls "/content/drive/My Drive/"

!ls "/content/drive/My Drive/StudentsPerformance.csv"

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline

students = pd.read_csv("/content/drive/My Drive/StudentsPerformance.csv")
students.head()

plt.hist(students['math score'])
plt.title("Math Scores")
plt.xlabel("Raw Score")
plt.ylabel("Frequency of Score")

plt.hist(students['reading score'])
plt.title("Reading Scores")
plt.xlabel("Raw Score")
plt.ylabel("Frequency of Score")

plt.hist(students['writing score'])
plt.title("Writing Scores")
plt.xlabel("Raw Score")
plt.ylabel("Frequency of Score")

plt.scatter(students['reading score'], students['writing score'])
plt.title("Relation of Reading and Writing Scores")
plt.xlabel("Reading Scores")
plt.ylabel("Writing Scores")

plt.scatter(students['math score'], students['reading score'])
plt.title("Relation of Math and Reading Scores")
plt.xlabel("Math Scores")
plt.ylabel("Reading Scores")

plt.scatter(students['math score'], students['writing score'])
plt.title("Relation of Math and Writing Scores")
plt.xlabel("Math Scores")
plt.ylabel("Writing Scores")

plt.hist([
       students['math score'], students['math score'], students['math score']
    ], 
    stacked=True, 
    label=["Reading", "Writing", "Math"])
plt.title("Scores Across Several Tests")
plt.xlabel("Raw Score")
plt.ylabel("Frequency of Scores")

plt.boxplot([students['math score'], students['math score'], students['math score']])
plt.title("Range of Scores") 
plt.xlabel("Tests")
plt.ylabel("Raw Score")
#why doesnt this allow horizontal?
#why doesnt this allow the labeling of each test?

plt.boxplot(students['math score'], 0, 'rs', 0)
plt.title("Boxplot of Math Scores")
plt.xlabel("Raw Score")
plt.ylabel("Math Scores")

plt.boxplot(students['reading score'], 0, 'rs', 0)
plt.title("Boxplot of Reading Scores")
plt.xlabel("Raw Score")
plt.ylabel("Reading Scores")

plt.boxplot(students['writing score'], 0, 'rs', 0)
plt.title("Boxplot of Writing Scores")
plt.xlabel("Raw Score")
plt.ylabel("Writing Scores")

students['totalscore']= (students['math score']  + students['reading score'] + students['writing score'])
plt.boxplot(students['totalscore'], 0, 'rs', 0)
plt.title("Boxplot of Total Scores")
plt.xlabel("Scores")
plt.ylabel("Raw Scores")

plt.plot(students['math score'])
plt.plot(students['reading score'])
plt.plot(students['writing score'])
plt.title("Overlap of Scores")
plt.xlabel("Frequency")
plt.ylabel("Scores")

meanmath = students['math score'].mean()
meanread = students['reading score'].mean()
meanwrite = students['writing score'].mean()
print "Average Math Score ="
print meanmath.round()
print "Average Reading Score ="
print meanread.round()
print "Average Writing Score ="
print meanwrite.round()
totalscore= (students['math score']  + students['reading score'] + students['writing score'])
print "Average Total Score ="
meantotal= totalscore.mean()
print meantotal.round()

lowmath= students['math score'].min()
print "The lowest math score was"
print lowmath
lowread= students['reading score'].min()
print "The lowest reading score was"
print lowread
lowwrite= students['writing score'].min()
print "The lowest writing score was"
print lowwrite

highmath= students['math score'].max()
print "The highest math score was"
print highmath
highread= students['reading score'].max()
print "The highest reading score was"
print highread
highwrite= students['writing score'].max()
print "The highest writing score was"
print highwrite

#counts the amount of people who recieved the average scores for each section
mmcount=0
for scores in students['math score']:
  if scores == meanmath.round():
    mmcount= mmcount+1
print mmcount
print ("people recieved the average math score")
avmath= mmcount

mrcount=0
for scores in students['reading score']:
  if scores == meanread.round():
    mrcount= mrcount+1
print mrcount
print ("people recieved the average reading score")
avread= mrcount

mwcount=0
for scores in students['writing score']:
  if scores == meanwrite.round():
    mwcount= mwcount+1
print mwcount
print ("people recieved the average writing score")
avwrite= mwcount

#counts the amount of people who recieved below the average scores for each section
mmcount=0
for scores in students['math score']:
  if scores < meanmath.round():
    mmcount= mmcount+1
print mmcount
print ("people recieved a below average math score")
belmath= mmcount

mrcount=0
for scores in students['reading score']:
  if scores < meanread.round():
    mrcount= mrcount+1
print mrcount
print ("people recieved a below average reading score")
belread= mrcount

mwcount=0
for scores in students['writing score']:
  if scores < meanwrite.round():
    mwcount= mwcount+1
print mwcount
print ("people recieved a below average writing score")
belwrite= mwcount

#counts the amount of people who recieved above the average scores for each section
mmcount=0
for scores in students['math score']:
  if scores > meanmath.round():
    mmcount= mmcount+1
print mmcount
print ("people recieved an above average math score")
abvmath= mmcount

mrcount=0
for scores in students['reading score']:
  if scores > meanread.round():
    mrcount= mrcount+1
print mrcount
print ("people recieved an above average reading score")
abvread= mrcount

mwcount=0
for scores in students['writing score']:
  if scores > meanwrite.round():
    mwcount= mwcount+1
print mwcount
print ("people recieved an above average writing score")
abvwrite= mwcount

plt.plot(totalscore)
plt.plot(meantotal)
plt.title("Frequency Graph of Total Score in Relation to Average")
plt.xlabel("Frequency")
plt.ylabel("Raw Scores")

#//template for pie graphs
#labels = 'Python', 'C++', 'Ruby', 'Java'
#sizes = [215, 130, 245, 210]
#colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']
#explode = (0.1, 0, 0, 0)  # explode 1st slice
# Plot
#plt.pie(sizes, explode=explode, labels=labels, colors=colors,
#        autopct='%1.1f%%', shadow=True, startangle=140)
 
#plt.axis('equal')
#plt.show()

#pie chart for average math score relativity
labels = 'Average', 'Below Average', 'Above Average'

sizes = [avmath, belmath, abvmath]
colors = ['yellow', 'red', 'green']
explode = (0.1, 0, 0)  # explode 1st slice
#Plot
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
       autopct='%1.1f%%', shadow=True, startangle=140)
 
plt.axis('equal')
print "Math Score Distribution"
plt.show()

#pie chart for average reading score relativity
labels = 'Average', 'Below Average', 'Above Average'

sizes = [avread, belread, abvread]
colors = ['yellow', 'red', 'green']
explode = (0.1, 0, 0)  # explode 1st slice
#Plot
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
       autopct='%1.1f%%', shadow=True, startangle=140)
 
plt.axis('equal')
print "Reading Score Distribution"
plt.show()

#pie chart for average writing score relativity
labels = 'Average', 'Below Average', 'Above Average'

sizes = [avwrite, belwrite, abvwrite]
colors = ['yellow', 'red', 'green']
explode = (0.1, 0, 0)  # explode 1st slice
#Plot
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
       autopct='%1.1f%%', shadow=True, startangle=140)
 
plt.axis('equal')
print "Writing Score Distribution"
plt.show()

#charts total score pie charts
totals= students['writing score'] + students['math score'] + students['reading score']

mtcount=0
for scores in totals:
  if scores < meantotal.round():
    mtcount= mtcount+1
print mtcount
print ("people recieved a below average total score")
belt= mtcount
print ""

mtcount=0
for scores in totals:
  if scores > meantotal.round():
    mtcount= mtcount+1
print mtcount
print ("people recieved an above average total score")
abvt= mtcount

print""

mtcount=0
for scores in totals:
  if scores == meantotal.round():
    mtcount= mtcount+1
print mtcount
print ("people recieved the average total score")
avt= mtcount

print""


#pie chart for average writing score relativity
labels = 'Average', 'Below Average', 'Above Average'

sizes = [avt, belt, abvt]
colors = ['yellow', 'red', 'green']
explode = (0.5, 0, 0)  # explode 1st slice
#Plot
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
       autopct='%1.1f%%', shadow=True, startangle=140)
 
plt.axis('equal')
print "Total Score Distribution"
plt.show()

students.head()

#counts the number of male and female
f=0
m=0
for gender in students['gender']:
  if gender == 'female':
    f=f+1
  else:
    m=m+1
print "There were"
print f
print "female students who took the examination"
print ""
print "There were"
print m
print "male students who took the examination"
print ""
print "Total Students:"
totalstudents = m+f
print totalstudents
print ""
labels = 'Female', 'Male'

sizes = [f, m]
colors = ['pink', 'blue']
explode = (0, 0)  
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
       autopct='%1.1f%%', shadow=True, startangle=140)
 
plt.axis('equal')
print "Gender Distribution"
plt.show()

#Finds the number of students in each race/ ethnic group
A=0
B=0
C=0
D=0
E=0
for race in students['race/ethnicity']:
  if race == "group A":
    A=A+1
  if race == "group B":
    B=B+1
  if race == "group C":
    C=C+1
  if race == "group D":
    D=D+1
  if race == "group E":
    E=E+1
print "Students in Group A of Race/Ethnicity"
print A
print "Students in Group B of Race/Ethnicity"
print B
print "Students in Group C of Race/Ethnicity"
print C
print "Students in Group D of Race/Ethnicity"
print D
print "Students in Group E of Race/Ethnicity"
print E
# print students['race/ethnicity']
print ""
print "Distribution of Race/ Ethnic Group"
labels = 'Group A', 'Group B', 'Group C', 'Group D', 'Group E'

sizes = [A, B, C, D ,E]
colors = ['red', 'orange', 'yellow', 'green', 'magenta' ]
explode = (0, 0,0,0,0)  
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
       autopct='%1.1f%%', shadow=True, startangle=140)
 
plt.axis('equal')
plt.show()

#finds the number of students who took a course
count = 0
for course in students['test preparation course']:
  if course== "completed":
    count=count+1
print count    
print "students completed a test preparation course"
print ""

print 1000-count
print "students did not complete a test preparation course"

#plot
print ""
print "Test Preparation Course or Not?"
labels = 'Completed', "Not Taken"

sizes = [count, 1000-count]
colors = ['blue', 'red']
explode = (0, 0)  
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
       autopct='%1.1f%%', shadow=True, startangle=140)
 
plt.axis('equal')
plt.show()

#counts whether students have free/ reduced lunch
s=0
for bentou in students['lunch']:
  if bentou== "standard":
    s=s+1
print s
print "students use a standard lunch plan"

print ""
print 1000-s
print "students are on the free/reduced lunch plan"

print ""
print "Distribution of Lunch Plans"
labels = 'Standard', "Free/ Reduced"

sizes = [s, 1000-s]
colors = ['blue', 'red']
explode = (0, 0)  
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
       autopct='%1.1f%%', shadow=True, startangle=140)
 
plt.axis('equal')
plt.show()

#tracks parental education and first generation status
s=0
a=0
b=0
m=0
sh=0
hs=0

for edu in students['parental level of education']:
  if edu == "some college":
    s=s+1
  if edu == "associate's degree":
    a=a+1
  if edu == "bachelor's degree":
    b= b+1
  if edu == "master's degree":
    m=m+1
  if edu == "high school":
    hs=hs+1
  if edu == "some high school":
    sh=sh+1
    
#print s+a+b+m+hs+sh   
#print  students['parental level of education']

print sh
print "students have parents who have only attended some highschool but have not completed their diploma or GED"

print hs
print "students have parnts who have completed highschool and earned a diploma or GED"

print s
print "students have parents who have attented some college (as highest source of education) but have not completed a degree"

print a
print "students have parents who have attended a community college (as highest source of education) and completed an associate's degree or other 2 year degree program"

print b 
print "students have parents who have attended an undergraduate college (as highest source of education) and have aquired a bachelor's degree or completed a full 4 year program"

print m
print "students have parents who have attended a graduate university and have completed a master's degree or other graduate program"

print ""
print "Distribution of Education"
labels = 'Some Highschool', 'Highschool', 'Some College', 'Commmunity College/ Associate\'s', 'Undergraduate College/ Bachelor\'s', 'Graduate University/ Master\'s'   

sizes = [sh, hs, s, a, b, m]
colors = ['red', 'orange', 'yellow', 'green', 'blue', 'cyan' ]
explode = (0, 0,0,0,0,0.2)  
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
       autopct='%1.1f%%', shadow=True, startangle=140)
 
plt.axis('equal')
plt.show()

print "Under the standard definition of first generation,"
print sh+hs+s+a
print "students would be considered as first-generation college students"
print "while"
print b+m
print "students would possess some form of legacy at a college"

print ""
print "Distribution of Legacy/ First Gen"
labels = 'First Generation', "Legacy/ Not First Gen"   
sizes = [sh+hs+s+a,b+m]
colors = ['red', 'blue' ]
explode = (0, 0)  
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
       autopct='%1.1f%%', shadow=True, startangle=140)

#tried to make a venn diagram but wasnt able to hange subesets for some reason

#from matplotlib_venn import venn3
 
# Make the diagram
#venn3(subsets = (10, 8, 22, 6,9,4,2))
#plt.show()

students.head()



